generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now()) 
  role          Role     @default(USER)
  email         String   @unique
  profile       Profile?
  profileImage  String?  
  password      String   
  name          String?
  posts         Post[]
  comments      Comment[] 
  likes         Like[]    
}

model Profile {
  id          Int      @id @default(autoincrement())
  bio         String
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  updatedAt   DateTime @updatedAt 
  socialLinks String[] 
}

model Post {
  id         Int        @id @default(autoincrement())
  author     User       @relation(fields: [authorId], references: [id])
  authorId   Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  title      String
  content    String
  categories PostCategory[] 
  comments   Comment[]  
  likes      Like[]     
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Category {
  id        Int           @id @default(autoincrement())
  name      String
  posts     PostCategory[] 
}

model PostCategory {
  postId    Int
  categoryId Int
  Post      Post   @relation(fields: [postId], references: [id])
  Category  Category @relation(fields: [categoryId], references: [id])
  @@id([postId, categoryId]) 
}


enum Role {
  USER
}
