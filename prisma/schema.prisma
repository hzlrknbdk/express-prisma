generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  name         String?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  password     String
  profileImage String?
  comments     Comment[]
  likes        Like[]
  posts        Post[]
  profile      Profile?
}

model Profile {
  id          Int      @id @default(autoincrement())
  bio         String
  userId      Int      @unique
  socialLinks String[]
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model Post {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  published  Boolean        @default(false)
  title      String
  authorId   Int
  content    String
  comments   Comment[]
  likes      Like[]
  author     User           @relation(fields: [authorId], references: [id])
  categories PostCategory[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  content   String
  postId    Int
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Like {
  id     Int  @id @default(autoincrement())
  postId Int
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}

model Category {
  id    Int            @id @default(autoincrement())
  name  String
  posts PostCategory[]
}

model PostCategory {
  postId     Int
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id])
  Post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}

enum Role {
  USER
}
